// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupOldEvents = `-- name: CleanupOldEvents :exec
DELETE FROM event_dedup
WHERE processed_at < $1
`

func (q *Queries) CleanupOldEvents(ctx context.Context, processedAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, cleanupOldEvents, processedAt)
	return err
}

const countTransfers = `-- name: CountTransfers :one
SELECT COUNT(*) FROM transfers
WHERE 
  ($1::uuid IS NULL OR from_account_id = $1) AND
  ($2::uuid IS NULL OR to_account_id = $2) AND
  ($3::text IS NULL OR status = $3) AND
  ($4::text IS NULL OR currency = $4)
`

type CountTransfersParams struct {
	FromAccountID pgtype.UUID
	ToAccountID   pgtype.UUID
	Status        pgtype.Text
	Currency      pgtype.Text
}

func (q *Queries) CountTransfers(ctx context.Context, arg CountTransfersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countTransfers,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Status,
		arg.Currency,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStatement = `-- name: CreateStatement :exec

INSERT INTO statements (account_id, entry_id, amount_minor, side, ts)
VALUES ($1, $2, $3, $4, $5)
`

type CreateStatementParams struct {
	AccountID   pgtype.UUID
	EntryID     pgtype.UUID
	AmountMinor int64
	Side        string
	Ts          pgtype.Timestamptz
}

// Statement Queries
func (q *Queries) CreateStatement(ctx context.Context, arg CreateStatementParams) error {
	_, err := q.db.Exec(ctx, createStatement,
		arg.AccountID,
		arg.EntryID,
		arg.AmountMinor,
		arg.Side,
		arg.Ts,
	)
	return err
}

const createTransfer = `-- name: CreateTransfer :exec

INSERT INTO transfers (id, from_account_id, to_account_id, amount_minor, currency, status, idempotency_key, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now())
ON CONFLICT (id) DO NOTHING
`

type CreateTransferParams struct {
	ID             pgtype.UUID
	FromAccountID  pgtype.UUID
	ToAccountID    pgtype.UUID
	AmountMinor    int64
	Currency       string
	Status         string
	IdempotencyKey string
	CreatedAt      pgtype.Timestamptz
}

// Transfer Queries
func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) error {
	_, err := q.db.Exec(ctx, createTransfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.AmountMinor,
		arg.Currency,
		arg.Status,
		arg.IdempotencyKey,
		arg.CreatedAt,
	)
	return err
}

const getBalance = `-- name: GetBalance :one

SELECT account_id, currency, balance_minor, updated_at
FROM balances
WHERE account_id = $1
`

// Balance Queries
func (q *Queries) GetBalance(ctx context.Context, accountID pgtype.UUID) (Balance, error) {
	row := q.db.QueryRow(ctx, getBalance, accountID)
	var i Balance
	err := row.Scan(
		&i.AccountID,
		&i.Currency,
		&i.BalanceMinor,
		&i.UpdatedAt,
	)
	return i, err
}

const getStatements = `-- name: GetStatements :many
SELECT id, account_id, entry_id, amount_minor, side, ts
FROM statements
WHERE account_id = $1
  AND ts >= $2
  AND ts <= $3
ORDER BY ts DESC
`

type GetStatementsParams struct {
	AccountID pgtype.UUID
	Ts        pgtype.Timestamptz
	Ts_2      pgtype.Timestamptz
}

func (q *Queries) GetStatements(ctx context.Context, arg GetStatementsParams) ([]Statement, error) {
	rows, err := q.db.Query(ctx, getStatements, arg.AccountID, arg.Ts, arg.Ts_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Statement
	for rows.Next() {
		var i Statement
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EntryID,
			&i.AmountMinor,
			&i.Side,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatementsByAccount = `-- name: GetStatementsByAccount :many
SELECT id, account_id, entry_id, amount_minor, side, ts
FROM statements
WHERE account_id = $1
ORDER BY ts DESC
LIMIT $2
`

type GetStatementsByAccountParams struct {
	AccountID pgtype.UUID
	Limit     int32
}

func (q *Queries) GetStatementsByAccount(ctx context.Context, arg GetStatementsByAccountParams) ([]Statement, error) {
	rows, err := q.db.Query(ctx, getStatementsByAccount, arg.AccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Statement
	for rows.Next() {
		var i Statement
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EntryID,
			&i.AmountMinor,
			&i.Side,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount_minor, currency, status, idempotency_key, created_at, updated_at
FROM transfers
WHERE id = $1
`

func (q *Queries) GetTransfer(ctx context.Context, id pgtype.UUID) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountMinor,
		&i.Currency,
		&i.Status,
		&i.IdempotencyKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isEventProcessed = `-- name: IsEventProcessed :one

SELECT EXISTS(SELECT 1 FROM event_dedup WHERE event_id = $1)
`

// Event Deduplication Queries
func (q *Queries) IsEventProcessed(ctx context.Context, eventID pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isEventProcessed, eventID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, amount_minor, currency, status, idempotency_key, created_at, updated_at
FROM transfers
WHERE 
  ($1::uuid IS NULL OR from_account_id = $1) AND
  ($2::uuid IS NULL OR to_account_id = $2) AND
  ($3::text IS NULL OR status = $3) AND
  ($4::text IS NULL OR currency = $4)
ORDER BY created_at DESC
LIMIT $6 OFFSET $5
`

type ListTransfersParams struct {
	FromAccountID pgtype.UUID
	ToAccountID   pgtype.UUID
	Status        pgtype.Text
	Currency      pgtype.Text
	Offset        int32
	Limit         int32
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfers,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Status,
		arg.Currency,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.AmountMinor,
			&i.Currency,
			&i.Status,
			&i.IdempotencyKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventProcessed = `-- name: MarkEventProcessed :exec
INSERT INTO event_dedup (event_id, processed_at)
VALUES ($1, now())
ON CONFLICT (event_id) DO NOTHING
`

func (q *Queries) MarkEventProcessed(ctx context.Context, eventID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markEventProcessed, eventID)
	return err
}

const setBalance = `-- name: SetBalance :exec
INSERT INTO balances (account_id, currency, balance_minor, updated_at)
VALUES ($1, $2, $3, now())
ON CONFLICT (account_id) DO UPDATE
SET balance_minor = EXCLUDED.balance_minor,
    updated_at = now()
`

type SetBalanceParams struct {
	AccountID    pgtype.UUID
	Currency     string
	BalanceMinor int64
}

func (q *Queries) SetBalance(ctx context.Context, arg SetBalanceParams) error {
	_, err := q.db.Exec(ctx, setBalance, arg.AccountID, arg.Currency, arg.BalanceMinor)
	return err
}

const updateTransferStatus = `-- name: UpdateTransferStatus :exec
UPDATE transfers
SET status = $2, updated_at = now()
WHERE id = $1
`

type UpdateTransferStatusParams struct {
	ID     pgtype.UUID
	Status string
}

func (q *Queries) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) error {
	_, err := q.db.Exec(ctx, updateTransferStatus, arg.ID, arg.Status)
	return err
}

const upsertBalance = `-- name: UpsertBalance :exec
INSERT INTO balances (account_id, currency, balance_minor, updated_at)
VALUES ($1, $2, $3, now())
ON CONFLICT (account_id) DO UPDATE
SET balance_minor = balances.balance_minor + EXCLUDED.balance_minor,
    updated_at = now()
`

type UpsertBalanceParams struct {
	AccountID    pgtype.UUID
	Currency     string
	BalanceMinor int64
}

func (q *Queries) UpsertBalance(ctx context.Context, arg UpsertBalanceParams) error {
	_, err := q.db.Exec(ctx, upsertBalance, arg.AccountID, arg.Currency, arg.BalanceMinor)
	return err
}
