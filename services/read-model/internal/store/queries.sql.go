// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupOldEvents = `-- name: CleanupOldEvents :exec
DELETE FROM event_dedup
WHERE processed_at < $1
`

func (q *Queries) CleanupOldEvents(ctx context.Context, processedAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, cleanupOldEvents, processedAt)
	return err
}

const createStatement = `-- name: CreateStatement :exec

INSERT INTO statements (account_id, entry_id, amount_minor, side, ts)
VALUES ($1, $2, $3, $4, $5)
`

type CreateStatementParams struct {
	AccountID   pgtype.UUID
	EntryID     pgtype.UUID
	AmountMinor int64
	Side        string
	Ts          pgtype.Timestamptz
}

// Statement Queries
func (q *Queries) CreateStatement(ctx context.Context, arg CreateStatementParams) error {
	_, err := q.db.Exec(ctx, createStatement,
		arg.AccountID,
		arg.EntryID,
		arg.AmountMinor,
		arg.Side,
		arg.Ts,
	)
	return err
}

const getBalance = `-- name: GetBalance :one

SELECT account_id, currency, balance_minor, updated_at
FROM balances
WHERE account_id = $1
`

// Balance Queries
func (q *Queries) GetBalance(ctx context.Context, accountID pgtype.UUID) (Balance, error) {
	row := q.db.QueryRow(ctx, getBalance, accountID)
	var i Balance
	err := row.Scan(
		&i.AccountID,
		&i.Currency,
		&i.BalanceMinor,
		&i.UpdatedAt,
	)
	return i, err
}

const getStatements = `-- name: GetStatements :many
SELECT id, account_id, entry_id, amount_minor, side, ts
FROM statements
WHERE account_id = $1
  AND ts >= $2
  AND ts <= $3
ORDER BY ts DESC
`

type GetStatementsParams struct {
	AccountID pgtype.UUID
	Ts        pgtype.Timestamptz
	Ts_2      pgtype.Timestamptz
}

func (q *Queries) GetStatements(ctx context.Context, arg GetStatementsParams) ([]Statement, error) {
	rows, err := q.db.Query(ctx, getStatements, arg.AccountID, arg.Ts, arg.Ts_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Statement
	for rows.Next() {
		var i Statement
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EntryID,
			&i.AmountMinor,
			&i.Side,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatementsByAccount = `-- name: GetStatementsByAccount :many
SELECT id, account_id, entry_id, amount_minor, side, ts
FROM statements
WHERE account_id = $1
ORDER BY ts DESC
LIMIT $2
`

type GetStatementsByAccountParams struct {
	AccountID pgtype.UUID
	Limit     int32
}

func (q *Queries) GetStatementsByAccount(ctx context.Context, arg GetStatementsByAccountParams) ([]Statement, error) {
	rows, err := q.db.Query(ctx, getStatementsByAccount, arg.AccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Statement
	for rows.Next() {
		var i Statement
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EntryID,
			&i.AmountMinor,
			&i.Side,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isEventProcessed = `-- name: IsEventProcessed :one

SELECT EXISTS(SELECT 1 FROM event_dedup WHERE event_id = $1)
`

// Event Deduplication Queries
func (q *Queries) IsEventProcessed(ctx context.Context, eventID pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isEventProcessed, eventID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const markEventProcessed = `-- name: MarkEventProcessed :exec
INSERT INTO event_dedup (event_id, processed_at)
VALUES ($1, now())
ON CONFLICT (event_id) DO NOTHING
`

func (q *Queries) MarkEventProcessed(ctx context.Context, eventID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markEventProcessed, eventID)
	return err
}

const setBalance = `-- name: SetBalance :exec
INSERT INTO balances (account_id, currency, balance_minor, updated_at)
VALUES ($1, $2, $3, now())
ON CONFLICT (account_id) DO UPDATE
SET balance_minor = EXCLUDED.balance_minor,
    updated_at = now()
`

type SetBalanceParams struct {
	AccountID    pgtype.UUID
	Currency     string
	BalanceMinor int64
}

func (q *Queries) SetBalance(ctx context.Context, arg SetBalanceParams) error {
	_, err := q.db.Exec(ctx, setBalance, arg.AccountID, arg.Currency, arg.BalanceMinor)
	return err
}

const upsertBalance = `-- name: UpsertBalance :exec
INSERT INTO balances (account_id, currency, balance_minor, updated_at)
VALUES ($1, $2, $3, now())
ON CONFLICT (account_id) DO UPDATE
SET balance_minor = balances.balance_minor + EXCLUDED.balance_minor,
    updated_at = now()
`

type UpsertBalanceParams struct {
	AccountID    pgtype.UUID
	Currency     string
	BalanceMinor int64
}

func (q *Queries) UpsertBalance(ctx context.Context, arg UpsertBalanceParams) error {
	_, err := q.db.Exec(ctx, upsertBalance, arg.AccountID, arg.Currency, arg.BalanceMinor)
	return err
}
