// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createOutboxEvent = `-- name: CreateOutboxEvent :one

INSERT INTO outbox (id, aggregate_type, aggregate_id, event_type, payload, headers, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at
`

type CreateOutboxEventParams struct {
	ID            uuid.UUID       `json:"id"`
	AggregateType string          `json:"aggregate_type"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	EventType     string          `json:"event_type"`
	Payload       []byte          `json:"payload"`
	Headers       json.RawMessage `json:"headers"`
	CreatedAt     time.Time       `json:"created_at"`
}

// Outbox Operations
func (q *Queries) CreateOutboxEvent(ctx context.Context, arg CreateOutboxEventParams) (Outbox, error) {
	row := q.db.QueryRowContext(ctx, createOutboxEvent,
		arg.ID,
		arg.AggregateType,
		arg.AggregateID,
		arg.EventType,
		arg.Payload,
		arg.Headers,
		arg.CreatedAt,
	)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateType,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const createTransfer = `-- name: CreateTransfer :one

INSERT INTO transfers (id, from_account_id, to_account_id, amount_minor, currency, idempotency_key, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, from_account_id, to_account_id, amount_minor, currency, idempotency_key, status, entry_id, failure_reason, created_at, updated_at
`

type CreateTransferParams struct {
	ID             uuid.UUID `json:"id"`
	FromAccountID  uuid.UUID `json:"from_account_id"`
	ToAccountID    uuid.UUID `json:"to_account_id"`
	AmountMinor    int64     `json:"amount_minor"`
	Currency       string    `json:"currency"`
	IdempotencyKey string    `json:"idempotency_key"`
	Status         string    `json:"status"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

// Transfer Operations
func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.AmountMinor,
		arg.Currency,
		arg.IdempotencyKey,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountMinor,
		&i.Currency,
		&i.IdempotencyKey,
		&i.Status,
		&i.EntryID,
		&i.FailureReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOutboxEvent = `-- name: GetOutboxEvent :one
SELECT id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at FROM outbox
WHERE id = $1
`

func (q *Queries) GetOutboxEvent(ctx context.Context, id uuid.UUID) (Outbox, error) {
	row := q.db.QueryRowContext(ctx, getOutboxEvent, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateType,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount_minor, currency, idempotency_key, status, entry_id, failure_reason, created_at, updated_at FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountMinor,
		&i.Currency,
		&i.IdempotencyKey,
		&i.Status,
		&i.EntryID,
		&i.FailureReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferByIdempotencyKey = `-- name: GetTransferByIdempotencyKey :one
SELECT id, from_account_id, to_account_id, amount_minor, currency, idempotency_key, status, entry_id, failure_reason, created_at, updated_at FROM transfers WHERE idempotency_key = $1 LIMIT 1
`

func (q *Queries) GetTransferByIdempotencyKey(ctx context.Context, idempotencyKey string) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferByIdempotencyKey, idempotencyKey)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountMinor,
		&i.Currency,
		&i.IdempotencyKey,
		&i.Status,
		&i.EntryID,
		&i.FailureReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnsentOutboxEvents = `-- name: GetUnsentOutboxEvents :many
SELECT id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at FROM outbox
WHERE sent_at IS NULL
ORDER BY created_at
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetUnsentOutboxEvents(ctx context.Context, limit int32) ([]Outbox, error) {
	rows, err := q.db.QueryContext(ctx, getUnsentOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.AggregateType,
			&i.AggregateID,
			&i.EventType,
			&i.Payload,
			&i.Headers,
			&i.CreatedAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markOutboxEventSent = `-- name: MarkOutboxEventSent :exec
UPDATE outbox
SET sent_at = now()
WHERE id = $1
`

func (q *Queries) MarkOutboxEventSent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markOutboxEventSent, id)
	return err
}

const updateTransferCompleted = `-- name: UpdateTransferCompleted :exec
UPDATE transfers
SET status = 'COMPLETED', entry_id = $2, updated_at = now()
WHERE id = $1
`

type UpdateTransferCompletedParams struct {
	ID      uuid.UUID     `json:"id"`
	EntryID uuid.NullUUID `json:"entry_id"`
}

func (q *Queries) UpdateTransferCompleted(ctx context.Context, arg UpdateTransferCompletedParams) error {
	_, err := q.db.ExecContext(ctx, updateTransferCompleted, arg.ID, arg.EntryID)
	return err
}

const updateTransferFailed = `-- name: UpdateTransferFailed :exec
UPDATE transfers
SET status = 'FAILED', failure_reason = $2, updated_at = now()
WHERE id = $1
`

type UpdateTransferFailedParams struct {
	ID            uuid.UUID      `json:"id"`
	FailureReason sql.NullString `json:"failure_reason"`
}

func (q *Queries) UpdateTransferFailed(ctx context.Context, arg UpdateTransferFailedParams) error {
	_, err := q.db.ExecContext(ctx, updateTransferFailed, arg.ID, arg.FailureReason)
	return err
}
