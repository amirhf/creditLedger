// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package store

import (
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

type Outbox struct {
	ID            uuid.UUID       `json:"id"`
	AggregateType string          `json:"aggregate_type"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	EventType     string          `json:"event_type"`
	Payload       []byte          `json:"payload"`
	Headers       json.RawMessage `json:"headers"`
	CreatedAt     time.Time       `json:"created_at"`
	SentAt        sql.NullTime    `json:"sent_at"`
}

type Transfer struct {
	ID             uuid.UUID      `json:"id"`
	FromAccountID  uuid.UUID      `json:"from_account_id"`
	ToAccountID    uuid.UUID      `json:"to_account_id"`
	AmountMinor    int64          `json:"amount_minor"`
	Currency       string         `json:"currency"`
	IdempotencyKey string         `json:"idempotency_key"`
	Status         string         `json:"status"`
	EntryID        uuid.NullUUID  `json:"entry_id"`
	FailureReason  sql.NullString `json:"failure_reason"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	// Transfer lifecycle state: INITIATED, LEDGER_CALLED, COMPLETED, RECOVERING, COMPENSATING, COMPENSATED, FAILED
	State sql.NullString `json:"state"`
	// Timestamp when ledger HTTP call was made
	LedgerCallAt sql.NullTime `json:"ledger_call_at"`
	// Journal entry ID returned by ledger service
	LedgerEntryID uuid.NullUUID `json:"ledger_entry_id"`
	// Full HTTP response from ledger (for debugging)
	LedgerResponse sql.NullString `json:"ledger_response"`
	// Number of times compensation was attempted
	CompensationAttempts sql.NullInt32 `json:"compensation_attempts"`
	// Timestamp when compensation completed successfully
	CompensatedAt sql.NullTime `json:"compensated_at"`
	// Number of times recovery was attempted
	RecoveryAttempts sql.NullInt32 `json:"recovery_attempts"`
	// Timestamp of last recovery attempt
	LastRecoveryAt sql.NullTime `json:"last_recovery_at"`
}
