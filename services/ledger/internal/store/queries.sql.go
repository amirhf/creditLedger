// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package store

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createJournalEntry = `-- name: CreateJournalEntry :one

INSERT INTO journal_entries (entry_id, batch_id, ts)
VALUES ($1, $2, $3)
RETURNING entry_id, batch_id, ts
`

type CreateJournalEntryParams struct {
	EntryID uuid.UUID
	BatchID uuid.UUID
	Ts      time.Time
}

// Journal Entry Operations
func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, createJournalEntry, arg.EntryID, arg.BatchID, arg.Ts)
	var i JournalEntry
	err := row.Scan(&i.EntryID, &i.BatchID, &i.Ts)
	return i, err
}

const createJournalLine = `-- name: CreateJournalLine :one

INSERT INTO journal_lines (entry_id, account_id, amount_minor, side)
VALUES ($1, $2, $3, $4)
RETURNING id, entry_id, account_id, amount_minor, side
`

type CreateJournalLineParams struct {
	EntryID     uuid.UUID
	AccountID   uuid.UUID
	AmountMinor int64
	Side        string
}

// Journal Line Operations
func (q *Queries) CreateJournalLine(ctx context.Context, arg CreateJournalLineParams) (JournalLine, error) {
	row := q.db.QueryRowContext(ctx, createJournalLine,
		arg.EntryID,
		arg.AccountID,
		arg.AmountMinor,
		arg.Side,
	)
	var i JournalLine
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.AccountID,
		&i.AmountMinor,
		&i.Side,
	)
	return i, err
}

const createOutboxEvent = `-- name: CreateOutboxEvent :one

INSERT INTO outbox (id, aggregate_type, aggregate_id, event_type, payload, headers, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at
`

type CreateOutboxEventParams struct {
	ID            uuid.UUID
	AggregateType string
	AggregateID   uuid.UUID
	EventType     string
	Payload       []byte
	Headers       json.RawMessage
	CreatedAt     time.Time
}

// Outbox Operations
func (q *Queries) CreateOutboxEvent(ctx context.Context, arg CreateOutboxEventParams) (Outbox, error) {
	row := q.db.QueryRowContext(ctx, createOutboxEvent,
		arg.ID,
		arg.AggregateType,
		arg.AggregateID,
		arg.EventType,
		arg.Payload,
		arg.Headers,
		arg.CreatedAt,
	)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateType,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const getJournalEntriesByBatch = `-- name: GetJournalEntriesByBatch :many
SELECT entry_id, batch_id, ts FROM journal_entries
WHERE batch_id = $1
ORDER BY ts
`

func (q *Queries) GetJournalEntriesByBatch(ctx context.Context, batchID uuid.UUID) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, getJournalEntriesByBatch, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(&i.EntryID, &i.BatchID, &i.Ts); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJournalEntry = `-- name: GetJournalEntry :one
SELECT entry_id, batch_id, ts FROM journal_entries
WHERE entry_id = $1
`

func (q *Queries) GetJournalEntry(ctx context.Context, entryID uuid.UUID) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getJournalEntry, entryID)
	var i JournalEntry
	err := row.Scan(&i.EntryID, &i.BatchID, &i.Ts)
	return i, err
}

const getJournalLinesByAccount = `-- name: GetJournalLinesByAccount :many
SELECT jl.id, jl.entry_id, jl.account_id, jl.amount_minor, jl.side, je.ts
FROM journal_lines jl
JOIN journal_entries je ON jl.entry_id = je.entry_id
WHERE jl.account_id = $1
ORDER BY je.ts DESC
LIMIT $2
`

type GetJournalLinesByAccountParams struct {
	AccountID uuid.UUID
	Limit     int32
}

type GetJournalLinesByAccountRow struct {
	ID          int64
	EntryID     uuid.UUID
	AccountID   uuid.UUID
	AmountMinor int64
	Side        string
	Ts          time.Time
}

func (q *Queries) GetJournalLinesByAccount(ctx context.Context, arg GetJournalLinesByAccountParams) ([]GetJournalLinesByAccountRow, error) {
	rows, err := q.db.QueryContext(ctx, getJournalLinesByAccount, arg.AccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJournalLinesByAccountRow
	for rows.Next() {
		var i GetJournalLinesByAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.AccountID,
			&i.AmountMinor,
			&i.Side,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJournalLinesByEntry = `-- name: GetJournalLinesByEntry :many
SELECT id, entry_id, account_id, amount_minor, side FROM journal_lines
WHERE entry_id = $1
ORDER BY id
`

func (q *Queries) GetJournalLinesByEntry(ctx context.Context, entryID uuid.UUID) ([]JournalLine, error) {
	rows, err := q.db.QueryContext(ctx, getJournalLinesByEntry, entryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalLine
	for rows.Next() {
		var i JournalLine
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.AccountID,
			&i.AmountMinor,
			&i.Side,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutboxEvent = `-- name: GetOutboxEvent :one
SELECT id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at FROM outbox
WHERE id = $1
`

func (q *Queries) GetOutboxEvent(ctx context.Context, id uuid.UUID) (Outbox, error) {
	row := q.db.QueryRowContext(ctx, getOutboxEvent, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateType,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const getUnsentOutboxEvents = `-- name: GetUnsentOutboxEvents :many
SELECT id, aggregate_type, aggregate_id, event_type, payload, headers, created_at, sent_at FROM outbox
WHERE sent_at IS NULL
ORDER BY created_at
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetUnsentOutboxEvents(ctx context.Context, limit int32) ([]Outbox, error) {
	rows, err := q.db.QueryContext(ctx, getUnsentOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.AggregateType,
			&i.AggregateID,
			&i.EventType,
			&i.Payload,
			&i.Headers,
			&i.CreatedAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markOutboxEventSent = `-- name: MarkOutboxEventSent :exec
UPDATE outbox
SET sent_at = now()
WHERE id = $1
`

func (q *Queries) MarkOutboxEventSent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markOutboxEventSent, id)
	return err
}
